[{
  "title": "JavaScript: A Beginning",
  "url": "javascript-beginning",
  "created": "2013-05-14",
  "body": "<section><h2>Values</h2><p>Values are the \"things\" of programming in JavaScript.  A JavaScript application creates, manipulates, and shares values.</p><p>Values can be grouped in different ways:</p><ul><li>Primitive vs. Composite</li><li>Reduced vs. Unreduced</li><li>Active vs. Passive</li><li>Grouped by JavaScript Value Type</li></ul><aside><h3>Grouping Values</h3><p>It can help to see some examples of values and their groupings according to different criteria.</p><p>Take the following values:</p><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>width</code></li><li><code>null</code></li><li><code>Math.PI</code></li><li><code>{ left: 5, right: 6 }</code></li><li><code>0</code></li><li><code>Math.sqrt</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>Array.isArray</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul><h4>Primitive vs. Composite</h4><div class=row-fluid><div class=span6><h5>Primitive</h5><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>width</code></li><li><code>null</code></li><li><code>Math.PI</code></li><li><code>0</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div><div class=span6><h5>Composite</h5><ul class=inline><li><code>{ left: 5, right: 6 }</code></li><li><code>Math.sqrt</code></li><li><code>Array.isArray</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div></div><h4>Reduced vs. Unreduced</h4><div class=row-fluid><div class=span6><h5>Reduced</h5><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>null</code></li><li><code>{ left: 5, right: 6 }</code></li><li><code>0</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div><div class=span6><h5>Unreduced</h5><ul class=inline><li><code>width</code></li><li><code>Math.PI</code></li><li><code>Math.sqrt</code></li><li><code>Array.isArray</code></li><li><code>-0</code></li></ul></div></div><h4>Active vs. Passive</h4><div class=row-fluid><div class=span6><h5>Active</h5><ul class=inline><li><code>Math.sqrt</code></li><li><code>Array.isArray</code></li><li><code>function add(x, y) { return x + y; }</code></li></ul></div><div class=span6><h5>Passive</h5><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>width</code></li><li><code>null</code></li><li><code>Math.PI</code></li><li><code>{ left: 5, right: 6 }</code></li><li><code>0</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div></div><h4>Grouped by JavaScript Value Type</h4><div class=row-fluid><div class=span2><h5>Number</h5><ul class=inline><li><code>3</code></li><li><code>Math.PI</code></li><li><code>0</code></li><li><code>4.5</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>Infinity</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li></ul></div><div class=span2><h5>Boolean</h5><ul class=inline><li><code>true</code></li><li><code>false</code></li></ul></div><div class=span2><h5>String</h5><ul class=inline><li><code>'a'</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>''</code></li></ul></div><div class=span2><h5>Object</h5><ul class=inline><li><code>{ left: 5, right: 6 }</code></li><li><code>Math.sqrt</code></li><li><code>Array.isArray</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li></ul></div><div class=span2><h5>Null</h5><ul class=inline><li><code>null</code></li></ul></div><div class=span2><h5>Undefined</h5><ul class=inline><li><code>width</code></li><li><code>undefined</code></li></ul></div></div></aside><section><h3>Primitive vs. Composite</h3><div class=row-fluid><div class=span6><h4>Primitive</h4><p>Primitive values are single and atomic.  They represent one value, like the number 42 or the text \"It is nice outside today.\".</p><p>JavaScript provides a few different kinds of primitive values.</p></div><div class=span6><h4>Composite</h4><p>Composite values represent multiple values grouped into one logical entity, like the different parts of a mailing address or a sorted list of numbers.</p><p>JavaScript provides two basic kinds of composite values: <code>Objects</code>, which store their values as named attributes, and <code>Arrays</code>, which store their values as an ordered list.</p></div></div></section><section><h4>Accessing Individual Values Within a Composite Value</h4><p>Values held within a composite values can be retrieved using the <code>.</code> dot and <code>[]</code> bracket operators.<ul><li>The <code>.</code> dot operator is used between the <code>Object</code> and the property name: <code>Object.property</code>.</li><li>The <code>[]</code> bracket operator is used after the <code>Object</code> and contains the <em>quoted</em> property name: <code>Object['property']</code>.</li></ul><p>For example, the JavaScript environment provides the <code>Math</code> object that contains the value of &pi; in its <code>PI</code> property. The primitive value <code>3.141592653589793</code> can be retrieved by using the <code>.</code> dot operator between the <code>Math</code> object and its <code>PI</code> property name: <code>Math.PI</code>.  Similarily, the value can be retrieved by writing the <code>Math</code> object followed by the <code>[]</code> brack operator wrapping the <em>quoted</em> property name: <code>Math['PI']</code>.</p><p>The <code>[]</code> bracket operator is used to retrieve values from an <code>Array</code> using its numeric position within the list: <code>array[0]</code>. <div class=\"alert alert-info alert-block\"><h4><i class=\"icon-search\"></i> It's In the Details</h4><code>array[0]</code> retrieves the <em>first</em> value in a list. Notice that the list counter starts at 0.</div></section></section>"
}, {
  "title": "Fun with LiveScript",
  "url": "fun-with-livescript",
  "created": "2013-05-09",
  "body": "I've recently stumbled upon LiveScript and have really started to like it.  As a quick example, I am working on a JavaScript project for which we need to compute the factors of a number.  While this is not particularly difficult in JavaScript, in LiveScript it becomes incredibly succinct.<br><br>First we define a curried function which returns true if the first parameter is equally divisible by the second:<br><br><code>dividesInto = (x, y) --> x % y is 0</code><br><br>Then we write our factors function which takes a number and returns an array of its factors:<br><br><code>factors = (n) -> [1 to n] |> filter dividesInto n</code><br><br>And that's it!"
}]

