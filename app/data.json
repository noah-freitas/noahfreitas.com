[{
  "title"   : "Troloch",
  "url"     : "troloch",
  "created" : "2016-08-07",
  "body"    : "<section><style>blockquote p { margin-bottom: 15px; }</style><p style=\"text-align: center; margin-bottom: 50px;\"><img src=\"/images/troloch.jpg\" style=\"max-width: 100%;\"></p><blockquote><p>What sphinx of cement and aluminum bashed open their skulls and ate up their brains and imagination?</p><p>[Tr]oloch! [Tr]oloch! Nightmare of [Tr]oloch! [Tr]oloch the loveless! Mental [Tr]oloch! [Tr]oloch the heavy judger of men!</p><p>[Tr]oloch whose buildings are judgment!</p><p>[Tr]oloch whose blood is running money!</p><p>[Tr]oloch whose eyes are a thousand blind windows! [Tr]oloch whose skyscrapers stand in the long streets like endless Jehovahs!</p><p>[Tr]oloch whose love is endless oil and stone! [Tr]oloch whose soul is electricity and banks! [Tr]oloch whose poverty is the specter of genius!</p><p style=\"text-align: right;\">- Allen Ginsberg, <em>Howl</em></p></blockquote></section>"
},{
  "title" : "JavaScript Coercion",
  "url"   : "javascript-coercion",
  "created" : "2014-11-9",
  "body" : "<style>     td, th {         font-family : monospace;         width       : 50% !important;     } </style> <label>     Coerce values to     <select id=\"choose-coercion\" autofocus class=\"form-control\">         <option value=\"none\" selected>Don't Coerce</option>         <option value=\"number\">Number</option>         <option value=\"boolean\">Boolean</option>         <option value=\"string\">String</option>         <option value=\"object\">Object</option>     </select> </label> <table class=\"table\">     <thead>         <th>Original Value</th>         <th>Coerced Value</th>     </thead>     <tbody id=\"coercions\"></tbody> </table>",
  "scripts" : ["/js/js-coercions.js"]
}, {
  "title": "Marlowe; November 30th, 2009 - May 24th, 2014",
  "url": "marlowe",
  "created": "2014-05-26",
  "body": "<section><p style=\"text-align: center;\"><img src=\"/images/marlowe.jpg\" style=\"max-width: 100%;\"></p></section>"
}, {
  "title": "Readings in JavaScript",
  "url": "readings-in-javascript",
  "created": "2013-06-19",
  "body": "<section><h2>Reading Glasses</h2><p>We will be using a set of lenses to read JavaScript that reduces all source code to three different things:</p><dl><dt>Values</dt><dd>Values are the materials of programming. They are the things used, produced, and destroyed by the execution of source code.</dd><dt>Names</dt><dd>Names name values. A name can be directly substituted for the value that it names.</dd><dt>Operators</dt><dd>Operators perform operations on values.  An operator can take in zero or more values as input and produce zero or one value as output.</dd></dl><p>Whenever we encounter a bit of source code the first question we will ask is what kind of thing is each symbol in the text. Luckily, there are only three possible answers: values, names, and operators.</p><h2>Reading 1: jQuery</h2><h3>DOM Traversal Example</h3><p><code>$( \"button.continue\" ).html( \"Next Step...\" )</code><p>We'll start reading from left to right to figure out what kind of thing each symbol is. The first symbol is the <code>$</code>.  What do you think it is: value, name, or operator?</p><p>It is a name. A weird looking name you might say, but the dollar sign character along with some other characters are syntactically valid name characters. Other valid name characters include the alphabetic characters (both upper and lower case), the numerals (except as the first character of a name), and the <code>_</code> underscore character.</p><p>The next symbol we encounter is the <code>()</code>.  We will take the opening and closing parantheses as one symbol and ignore the thing contained within it for now. What kind of thing is this?</p><p>It is an operator. Specifically, it is the call operator. As input it takes two parameters: one to its left and one inside it. We'll wait to see what the call operator actually does until we consider how the code executes.</p><p>The next symbol is the <code>\"button.continue\"</code> within the call operator. It is a value.</p><p>Next we have a <code>.</code>, which is the dot operator. The dot operator takes two things as input: one to its left and one to its right.</p><p>Finally we have a name (<code>html</code>) followed by the call operator again (<code>()</code>) and another value inside it (<code>\"Next Step...\"</code>)</p></section>"
}, {
  "title": "Private Web",
  "url": "private-web",
  "created": "2013-06-09",
  "body": "<section><h2>A Proposal for Private Spaces on the Web</h2><p>In light of the developing information about the NSA's PRISM program I propose that <em>the web should have both public and privates spaces</em>.</p><p>I'll start with an analogy: real-time cameras in public spaces don't bother me.  A public space does not come with a reasonable expectation of privacy.  Moments of privacy are possible: a street can be empty or a camera broken, but one cannot expect privacy in a public space.</p><p>Real-time cameras in my home would bother me.  My home is a private space: I expect what I do in my home to be private, shared with those I choose.</p><p>The government's response to the PRISM program revelations implies that they believe the web as a whole should be a public space.</p><p>I assert that a web with both private and public spaces is better and more useful than a web with only public space.</p><p>A private web is the promise of cryptography.  I propose that all encrypted messages be considered private with all priveleges and expectations thereof.</p></section>"
},{
  "title": "JavaScript: A Beginning",
  "url": "javascript-beginning",
  "created": "2013-05-14",
  "body": "<section><h2>Values</h2><p>Values are the \"things\" of programming in JavaScript.  A JavaScript application creates, manipulates, and shares values.</p><p>Values can be grouped in different ways:</p><ul><li>Primitive vs. Composite</li><li>Reduced vs. Unreduced</li><li>Active vs. Passive</li><li>Grouped by JavaScript Value Type</li></ul><aside><h3>Grouping Values</h3><p>It can help to see some examples of values and their groupings according to different criteria.</p><p>Take the following values:</p><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>width</code></li><li><code>null</code></li><li><code>Math.PI</code></li><li><code>{ left: 5, right: 6 }</code></li><li><code>0</code></li><li><code>Math.sqrt</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>Array.isArray</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul><h4>Primitive vs. Composite</h4><div class=row-fluid><div class=span6><h5>Primitive</h5><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>width</code></li><li><code>null</code></li><li><code>Math.PI</code></li><li><code>0</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div><div class=span6><h5>Composite</h5><ul class=inline><li><code>{ left: 5, right: 6 }</code></li><li><code>Math.sqrt</code></li><li><code>Array.isArray</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div></div><h4>Reduced vs. Unreduced</h4><div class=row-fluid><div class=span6><h5>Reduced</h5><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>null</code></li><li><code>{ left: 5, right: 6 }</code></li><li><code>0</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div><div class=span6><h5>Unreduced</h5><ul class=inline><li><code>width</code></li><li><code>Math.PI</code></li><li><code>Math.sqrt</code></li><li><code>Array.isArray</code></li></ul></div></div><h4>Active vs. Passive</h4><div class=row-fluid><div class=span6><h5>Active</h5><ul class=inline><li><code>Math.sqrt</code></li><li><code>Array.isArray</code></li><li><code>function add(x, y) { return x + y; }</code></li></ul></div><div class=span6><h5>Passive</h5><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>width</code></li><li><code>null</code></li><li><code>Math.PI</code></li><li><code>{ left: 5, right: 6 }</code></li><li><code>0</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div></div><h4>Grouped by JavaScript Value Type</h4><div class=row-fluid><div class=span2><h5>Number</h5><ul class=inline><li><code>3</code></li><li><code>Math.PI</code></li><li><code>0</code></li><li><code>4.5</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>Infinity</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li></ul></div><div class=span2><h5>Boolean</h5><ul class=inline><li><code>true</code></li><li><code>false</code></li></ul></div><div class=span2><h5>String</h5><ul class=inline><li><code>'a'</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>''</code></li></ul></div><div class=span2><h5>Object</h5><ul class=inline><li><code>{ left: 5, right: 6 }</code></li><li><code>Math.sqrt</code></li><li><code>Array.isArray</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li></ul></div><div class=span2><h5>Null</h5><ul class=inline><li><code>null</code></li></ul></div><div class=span2><h5>Undefined</h5><ul class=inline><li><code>width</code></li><li><code>undefined</code></li></ul></div></div><div class=\"alert alert-block\"><h4><i class=icon-pencil></i> Exercises</h4><p><strong>1.1</strong> Group the following values in the four different ways.</p><p><ul class=inline><li><code>3.2 + 5</code></li><li><code>Object.apply.name</code></li><li><code>[]</code></li><li><code>undefined</code></li><li><code>-4.57198</code></li><li><code>true</code></li><li><code>'$50.01'</code></li><li><code>-321</code></li><li><code>Rectangle</code></li><li><code>null</code></li><li><code>Object.create</code></li><li><code>{ height: \"5 cm\", width: \"4 cm\", contents: { height: 3.32, title: \"Hello\" } }</code></li><li><code>Array.isArray([1, 2, 3])</code></li><li><code>[[1, 2], [3, [4, 5]]]</code></li><li><code>NaN</code></li><li><code>3.21E+100</code></li><li><code>function (x) { return x; }</code></li><li><code>\"\"</code></li><li><code>'false'</code></li><li><code>Infinity</code></li><li><code>[{}, {}, {}, {}, {}]</code></li><li><code>/hello/</code></li><li><code>5 - 0 + 2</code></li><li><code>\"[1, 2, 3]\"</code></li><li><code>'3'</code></li></ul></p></div></aside><section><h3>Primitive vs. Composite</h3><div class=row-fluid><div class=span6><h4>Primitive</h4><p>Primitive values are single and atomic.  They represent one value, like the number 42 or the text \"It is nice outside today.\".</p><p>JavaScript provides a few different kinds of primitive values.</p></div><div class=span6><h4>Composite</h4><p>Composite values represent multiple values grouped into one logical entity, like the different parts of a mailing address or a sorted list of numbers.</p><p>JavaScript provides two basic kinds of composite values: <code>Objects</code>, which store their values as named properties, and <code>Arrays</code>, which store their values as an ordered list.</p></div></div></section><section><h4>Accessing Values Inside an <code>Object</code></h4><p>Values held within an <code>Object</code> are accessed using the <code>.</code> dot and <code>[]</code> bracket operators.<ul><li>The <code>.</code> dot operator is written after the <code>Object</code> and before the property name: <code>Object.property</code>.</li><li>The <code>[]</code> bracket operator is written after the <code>Object</code> and contains the <em>quoted</em> property name: <code>Object['property']</code>.</li></ul><p>For example, the JavaScript environment provides the <code>Math</code> object that contains the value of &pi; in its <code>PI</code> property. The primitive value <code>3.141592653589793</code> can be retrieved by using the <code>.</code> dot operator between the <code>Math</code> object and its <code>PI</code> property name: <code>Math.PI</code>.  Similarily, the value can be retrieved by writing the <code>Math</code> object followed by the <code>[]</code> bracket operator wrapping the quoted property name: <code>Math['PI']</code>.</p><div class=\"alert alert-block\"><h4><i class=icon-pencil></i> Exercises</h4><p><strong>1.2</strong> JavaScript provides the value of the number <em>e</em> in the <code>E</code> property of the <code>Math</code> object.  How would you access this value using the <code>.</code> dot operator?  How would you access it using the <code>[]</code> bracket operator?</p></div><h4>Accessing Values Inside an <code>Array</code></h4><p>The <code>[]</code> bracket operator is used to access values in an <code>Array</code>.</p><p>Values in an <code>Array</code> are accessed by position. The position of a value inside an <code>Array</code> is known as its <strong>index</strong> and is expressed as a number. The index of an <code>Array</code> begins counting at <code>0</code>, not <code>1</code>.</p><ul><li>The <code>[]</code> bracket operator is written after the <code>Array</code> and contains the value's index.</li></ul><p>For example, suppose we have an <code>Array</code> named <code>oneToTen</code> containing the numbers <code>1, 2, 3, 4, 5, 6, 7, 8, 9, 10</code>.  The value <code>1</code> can be accessed using the <code>[]</code> bracket operator and its index within <code>oneToTen</code>: <code>oneToTen[0]</code>.</p></section><div class=\"alert alert-block\"><h4><i class=icon-pencil></i> Exercises</h4><p><strong>1.3</strong> How would you access the value <code>7</code> within <code>oneToTen</code>?</p></div><section><h3>Reduced vs. Unreduced</h3><div class=row-fluid><div class=span6><h4>Reduced</h4><p>Reduced values cannot be represented any more simply in JavaScript.  They are values like <code>23</code>, <code>'Hello, world.'</code>, <code>true</code>, <code>[1, 2, 3]</code>, etc.</p><p>Reduced values created directly by the program are known as <strong>literal values</strong>.</p></div><div class=span6><h4>Unreduced</h4><p>Unreduced values <em>can</em> be represented in a simpler form.</p><p>Values can be simplified in two ways: by substituting <strong>names</strong> and by performing <strong>computations</strong>.</p><p>A name can be direcly substituted with the value is has been assigned.  There are three kinds of names:</p><ul><li>variables</li><li>keywords</li><li>properties</li></ul></div></div></section><section><h4>Variables</h4><p>Many variables come provided by the JavaScript environment.  The <code>Math</code> object is a provided variable we have already seen.  The name <code>Math</code> can be substituted with the reduced value which looks partly like this: <code>{ PI: 3.141592653589793, E: 2.718281828459045 }</code></p><p>Variables can also be created by the program using the <code>var</code> keyword followed by the name of the variable being created: <code>var color</code>.  A variable name can only include the letters of the alphabet, numbers (but not as the first character), and the special characters <code>_</code> and <code>$</code>.  JavaScript is case-sensitive, so <code>color</code>, <code>Color</code>, and <code>coLor</code> are all different names.</p><div class=\"alert alert-block\"><h4><i class=icon-pencil></i> Exercises</h4><p><strong>1.4</strong> Which of the following are valid variable names?</p><ul class=inline><li><code>x</code></li><li><code>_last</code></li><li><code>3pieces</code></li><li><code>$$</code></li><li><code>tomorrow-night</code></li><li><code>Y</code></li><li><code>block3</code></li><li><code>areYouAJavaProgrammer</code></li><li><code>total_x_$3</code></li></ul></div></section><section><h4>Keywords</h4><p>Keywords are named values provided by the JavaScript language.  They include a number of names that look like variables, such as the <code>var</code> keyword.  These kinds of keywords are called <strong>reserved words</strong>, because a program cannot use them as variable names.  Keywords also include values named with special symbols, such as the <code>.</code> dot and <code>[]</code> bracket operators.  These include all of the <strong>operators</strong> in JavaScript.</p><p>A program cannot create its own keywords in JavaScript.</p></section><div class=\"alert alert-block\"><h4><i class=icon-pencil></i> Exercises</h4><p><strong>1.5</strong> Describe in your own words what the <code>var</code>, <code>.</code>, and <code>[]</code> keywords do.</div><section><h4>Properties</h4><p></p></section><section><h4>Naming Values</h4><p>Values are named using the <code>=</code> assignment operator.  The name that is to be assigned a value is placed to the left of the operator and the value to be assigned is placed to its right.</p><p>For instance, to name the number 3 \"three\", we would write: <code>three = 3</code>.</p></section></section>"
}, {
  "title": "Fun with LiveScript",
  "url": "fun-with-livescript",
  "created": "2013-05-09",
  "body": "I've recently stumbled upon LiveScript and have really started to like it.  As a quick example, I am working on a JavaScript project for which we need to compute the factors of a number.  While this is not particularly difficult in JavaScript, in LiveScript it becomes incredibly succinct.<br><br>First we define a curried function which returns true if the first parameter is equally divisible by the second:<br><br><code>dividesInto = (x, y) --> x % y is 0</code><br><br>Then we write our factors function which takes a number and returns an array of its factors:<br><br><code>factors = (n) -> [1 to n] |> filter dividesInto n</code><br><br>And that's it!"
}]
