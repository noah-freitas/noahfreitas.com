[{
  "title": "JavaScript: A Beginning",
  "url": "javascript-beginning",
  "created": "2013-05-14",
  "body": "<section><h2>Values</h2><p>Values are the \"things\" of programming in JavaScript.  A JavaScript application creates, manipulates, and shares values.</p><p>Values can be grouped in different ways:</p><ul><li>Primitive vs. Composite</li><li>Reduced vs. Unreduced</li><li>Active vs. Passive</li><li>Grouped by JavaScript Value Type</li></ul><aside><h1>Grouping Values</h1><p>It can help to see some examples of values and their groupings according to different criteria</p><p>Take the following values:</p><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>width</code></li><li><code>null</code></li><li><code>Math.PI</code></li><li><code>{ left: 5, right: 6 }</code></li><li><code>0</code></li><li><code>Math.sqrt</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>Array.isArray</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul><h2>Primitive vs. Composite</h2><div class=row-fluid><div class=span4><h3>Primitive</h3><ul class=inline><li><code>'a'</code></li><li><code>3</code></li><li><code>null</code></li><li><code>Math.PI</code></li><li><code>0</code></li><li><code>undefined</code></li><li><code>4.5</code></li><li><code>true</code></li><li><code>NaN</code></li><li><code>5.72E14</code></li><li><code>\"Today in Santa Rosa...\"</code></li><li><code>false</code></li><li><code>Infinity</code></li><li><code>-0</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div><div class=span4><h3>Composite</h3><ul class=inline><li><code>{ left: 5, right: 6 }</code></li><li><code>Math.sqrt</code></li><li><code>Array.isArray</code></li><li><code>function add(x, y) { return x + y; }</code></li><li><code>[0, 1, 2, 3, 4]</code></li><li><code>/[0-9a-z]+/g</code></li><li><code>3.24e+149</code></li><li><code>''</code></li></ul></div><div class=span4><h3>Unknown</h3><ul class=inline><li><code>width</code></li></ul></div></div></aside></section>"
}, {
  "title": "Fun with LiveScript",
  "url": "fun-with-livescript",
  "created": "2013-05-09",
  "body": "I've recently stumbled upon LiveScript and have really started to like it.  As a quick example, I am working on a JavaScript project for which we need to compute the factors of a number.  While this is not particularly difficult in JavaScript, in LiveScript it becomes incredibly succinct.<br><br>First we define a curried function which returns true if the first parameter is equally divisible by the second:<br><br><code>dividesInto = (x, y) --> x % y is 0</code><br><br>Then we write our factors function which takes a number and returns an array of its factors:<br><br><code>factors = (n) -> [1 to n] |> filter dividesInto n</code><br><br>And that's it!"
}]

